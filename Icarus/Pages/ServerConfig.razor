@page "/guildsettings"

@using DSharpPlus.Entities;
@using Icarus.Discord;
@using Icarus.ServerSettings;
@using Icarus.Models

@inject DataContext DataContext
@inject DiscordBotService Bot
@inject IConfiguration Config

<PageTitle>Server Settings</PageTitle>

<h1>Server Settings</h1>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Value</th>
            <th>Preview</th>
            <th>Updated At</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var group in ConfigData)
        {
            <tr>
                <td colspan="5"><h3>@group.Key</h3></td>
            </tr>
            
            @foreach (var data in group)
            {
                <tr>
                    <td>@data.Item1.Name.Split(':')[1]</td>
                    <td>@data.Item1.Type</td>
                    <td>
                        <input type="text" id="input-@data.Item1.Name" name="input-@data.Item1.Name" value="@data.Item2?.Value" @oninput="(e) => OnInput(e, data.Item1.Name)"/>
                    </td>
                    <td>
                        @data.Item3
                    </td>
                    <td>@data.Item2?.UpdatedAt</td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    List<IGrouping<string, (ServerSettingTemplate, ServerSetting, string)>> ConfigData;

    protected override Task OnInitializedAsync()
    {
        ConfigData = ExtensionsServerConfig.LoadConfigValues(DataContext, Bot, Config);
        return Task.CompletedTask;
    }

    void OnInput(ChangeEventArgs e, string key)
    {

        ExtensionsServerConfig.Set(key, e.Value.ToString(), Bot, DataContext, Config);
        ConfigData = ExtensionsServerConfig.LoadConfigValues(DataContext, Bot, Config);
    }
}
